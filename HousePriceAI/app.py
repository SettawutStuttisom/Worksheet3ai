import os
import numpy as np
import pandas as pd
import streamlit as st
import joblib

from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# =============================================================================
# üìÅ CONFIGURATION
# =============================================================================
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_PATH = os.path.join(BASE_DIR, "data", "train.csv")
MODEL_PATH = os.path.join(BASE_DIR, "model", "best_model.pkl")

FEATURES = [
    "OverallQual",
    "GrLivArea",
    "GarageCars",
    "TotalBsmtSF",
    "FullBath",
    "YearBuilt"
]

MODEL_PARAMS = {
    "max_depth": 15,
    "min_samples_split": 5,
    "min_samples_leaf": 3,
    "random_state": 42,
}

USD_TO_THB = 37.0

# =============================================================================
# üè° STREAMLIT PAGE CONFIG
# =============================================================================
st.set_page_config(page_title="üè† House Price Prediction", layout="centered")
st.title("üè† ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô Homey")
st.write("üí° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Kaggle House Prices")

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
model_mse = None
model_r2 = None

# =============================================================================
# üß† MODEL TRAINING FUNCTION
# =============================================================================
def train_model():
    global model_mse, model_r2
    st.info("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
    os.makedirs(os.path.join(BASE_DIR, "model"), exist_ok=True)

    if not os.path.exists(DATA_PATH):
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå train.csv")
        st.stop()

    data = pd.read_csv(DATA_PATH)

    missing = [f for f in FEATURES if f not in data.columns]
    if missing:
        st.error(f"‚ùå ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {missing}")
        st.stop()

    X = data[FEATURES]
    y = np.log1p(data["SalePrice"])

    model = DecisionTreeRegressor(**MODEL_PARAMS)
    model.fit(X, y)

    y_pred = model.predict(X)
    model_mse = mean_squared_error(np.expm1(y), np.expm1(y_pred))
    model_r2 = r2_score(np.expm1(y), np.expm1(y_pred))

    joblib.dump((model, model_mse, model_r2), MODEL_PATH)
    st.success(f"‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ( R¬≤={model_r2:.4f})")
    return model

# =============================================================================
# üì• LOAD OR TRAIN MODEL
# =============================================================================
if not os.path.exists(MODEL_PATH):
    if os.path.exists(DATA_PATH):
        model = train_model()
    else:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå data/train.csv")
        st.stop()
else:
    try:
        model, model_mse, model_r2 = joblib.load(MODEL_PATH)
        st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        st.stop()

# =============================================================================
# üìù USER INPUT FORM
# =============================================================================
st.header("üìã ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô")

col1, col2 = st.columns(2)

with col1:
    OverallQual = st.slider("‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô (OverallQual)", 1, 10, 5)
    GarageCars = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡πÑ‡∏î‡πâ", 0, 5, 2)
    FullBath = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", 0, 5, 2)

with col2:
    GrLivArea = st.number_input("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏¢ (‡∏ï‡∏£.‡∏ü‡∏∏‡∏ï)", 500, 5000, 1500)
    TotalBsmtSF = st.number_input("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô (‡∏ï‡∏£.‡∏ü‡∏∏‡∏ï)", 0, 3000, 800)
    YearBuilt = st.number_input("‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡πâ‡∏≤‡∏ô", 1900, 2025, 2005)

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô DataFrame
input_data = pd.DataFrame(
    [[OverallQual, GrLivArea, GarageCars, TotalBsmtSF, FullBath, YearBuilt]],
    columns=FEATURES
)

# =============================================================================
# üîò BUTTON FOR PREDICTION
# =============================================================================
if st.button("üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô (‡∏ö‡∏≤‡∏ó)"):
    try:
        log_pred = model.predict(input_data)[0]
        base_price_usd = np.expm1(log_pred)
        final_price_thb = base_price_usd * USD_TO_THB

        st.subheader("üí∞ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô")
        st.write(f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: **‡∏ø{final_price_thb:,.2f} ‡∏ö‡∏≤‡∏ó**")
        st.info(
            f"üèóÔ∏è ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: {YearBuilt} | üöó ‡πÇ‡∏£‡∏á‡∏£‡∏ñ: {GarageCars} ‡∏ä‡πà‡∏≠‡∏á | üõÅ ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥: {FullBath} ‡∏´‡πâ‡∏≠‡∏á | üìê ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏¢: {GrLivArea} ft¬≤ | ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô: {TotalBsmtSF} ft¬≤"
        )

        # üìà ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        st.subheader("üìà ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")

        st.write(f"**R¬≤ Score:** {model_r2:.4f}")

        # üß© Feature & Parameter
        st.subheader("üß© ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree")
        st.write("**Feature ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏£‡∏ô:**")
        st.write(FEATURES)
        st.write("**Parameter ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•:**")
        st.write(MODEL_PARAMS)

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {e}")

st.markdown("---")
st.caption("ü§ñ ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ ‡πÄ‡∏™‡∏é‡∏ê‡∏ß‡∏∏‡∏í‡∏¥ | ‡∏ß‡∏¥‡∏ä‡∏≤ AI | ‡∏°‡∏Ç.")
