import os
import numpy as np
import pandas as pd
import streamlit as st
import joblib
from datetime import datetime
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# =============================================================================
# üìÅ CONFIGURATION
# =============================================================================
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_PATH = os.path.join(BASE_DIR, "data", "train.csv")
MODEL_PATH = os.path.join(BASE_DIR, "model", "best_model.pkl")

FEATURES = [
    "OverallQual",
    "GrLivArea",
    "GarageCars",
    "TotalBsmtSF",
    "FullBath",
    "YearBuilt",
    "TotRmsAbvGrd",
    "LotArea",
    "1stFlrSF",
    "BedroomAbvGr",
    "KitchenAbvGr"
]

MODEL_PARAMS = {
    "max_depth": 15,
    "min_samples_split": 5,
    "min_samples_leaf": 3,
    "random_state": 42,
}

USD_TO_THB = 37.0

# =============================================================================
# üè° STREAMLIT PAGE CONFIG
# =============================================================================
st.set_page_config(page_title="üè† House Price Prediction", layout="centered")
st.title("üè† ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ AI (Decision Tree)")

# =============================================================================
# üß† MODEL TRAINING FUNCTION
# =============================================================================
def train_model():
    st.info("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
    os.makedirs(os.path.join(BASE_DIR, "model"), exist_ok=True)

    if not os.path.exists(DATA_PATH):
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå train.csv")
        st.stop()

    data = pd.read_csv(DATA_PATH)
    missing = [f for f in FEATURES if f not in data.columns]
    if missing:
        st.error(f"‚ùå ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {missing}")
        st.stop()

    X = data[FEATURES]
    y = np.log1p(data["SalePrice"])

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )

    model = DecisionTreeRegressor(**MODEL_PARAMS)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    mse = mean_squared_error(np.expm1(y_test), np.expm1(y_pred))
    r2 = r2_score(np.expm1(y_test), np.expm1(y_pred))

    joblib.dump(model, MODEL_PATH)
    st.success(f"‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (MSE={mse:.2f}, R¬≤={r2:.4f})")
    return model

# =============================================================================
# üì• LOAD OR TRAIN MODEL
# =============================================================================
if not os.path.exists(MODEL_PATH):
    model = train_model()
else:
    try:
        model = joblib.load(MODEL_PATH)
        st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        st.stop()

# =============================================================================
# üìù USER INPUT FORM
# =============================================================================
st.header("üìã ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡πâ‡∏≤‡∏ô")

col1, col2 = st.columns(2)

with col1:
    OverallQual = st.slider("‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô (OverallQual)", 1, 10, 5)
    GarageCars = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡πÑ‡∏î‡πâ", 0, 5, 2)
    FullBath = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", 0, 5, 2)
    TotRmsAbvGrd = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô", 2, 15, 6)
    BedroomAbvGr = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô", 0, 10, 3)

with col2:
    GrLivArea_m2 = st.number_input("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏¢ (‡∏ï‡∏£.‡πÄ‡∏°‡∏ï‡∏£)", 50, 500, 150)
    TotalBsmtSF_m2 = st.number_input("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô (‡∏ï‡∏£.‡πÄ‡∏°‡∏ï‡∏£)", 0, 300, 80)
    LotArea_m2 = st.number_input("‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô (‡∏ï‡∏£.‡πÄ‡∏°‡∏ï‡∏£)", 100, 5000, 800)
    FirstFlr_m2 = st.number_input("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡πâ‡∏ô 1 (‡∏ï‡∏£.‡πÄ‡∏°‡∏ï‡∏£)", 50, 500, 120)
    KitchenAbvGr = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß", 0, 5, 1)
    YearBuilt = st.number_input(
        "‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡πâ‡∏≤‡∏ô", 1900, datetime.now().year, 2005
    )

# ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å m¬≤ ‚Üí ft¬≤
m2_to_ft2 = 10.7639
GrLivArea = GrLivArea_m2 * m2_to_ft2
TotalBsmtSF = TotalBsmtSF_m2 * m2_to_ft2
LotArea = LotArea_m2 * m2_to_ft2
FirstFlrSF = FirstFlr_m2 * m2_to_ft2

input_data = pd.DataFrame([[ 
    OverallQual,
    GrLivArea,
    GarageCars,
    TotalBsmtSF,
    FullBath,
    YearBuilt,
    TotRmsAbvGrd,
    LotArea,
    FirstFlrSF,
    BedroomAbvGr,
    KitchenAbvGr
]], columns=FEATURES)

# =============================================================================
# üîÆ PREDICTION FUNCTION
# =============================================================================
def adjust_price(base_price, garage_cars, full_bath, bedroom, kitchen,
                 GrLivArea_m2, TotalBsmtSF_m2, LotArea_m2, FirstFlr_m2, year_built):
    current_year = datetime.now().year
    age = current_year - year_built

    price = base_price

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥
    garage_factor = {0:0.85,1:0.93,2:1.00,3:1.08,4:1.15,5:1.18}
    bath_factor = {0:0.90,1:0.95,2:1.00,3:1.05,4:1.10,5:1.12}
    price *= garage_factor.get(garage_cars,1.0)
    price *= bath_factor.get(full_bath,1.0)

    # ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô
    if bedroom <= 2:
        price *= 0.95
    elif 3 <= bedroom <= 4:
        price *= 1.00
    elif 5 <= bedroom <= 6:
        price *= 1.05
    else:
        price *= 1.08

    # ‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß
    if kitchen == 0:
        price *= 0.85
    elif kitchen == 1:
        price *= 1.00
    elif kitchen == 2:
        price *= 1.05
    else:
        price *= 1.10

    # ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡πâ‡∏≤‡∏ô (‡∏õ‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ‚Üí ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)
    price *= 1 + (year_built - 2000)/100

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    price *= 1 + (GrLivArea_m2 - 150)/500       # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏¢
    price *= 1 + (TotalBsmtSF_m2 - 80)/300      # ‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô
    price *= 1 + (LotArea_m2 - 800)/2000        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô
    price *= 1 + (FirstFlr_m2 - 120)/200        # ‡∏ä‡∏±‡πâ‡∏ô 1

    return price, age

# =============================================================================
# üîò BUTTON FOR PREDICTION
# =============================================================================
if st.button("üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô (‡∏ö‡∏≤‡∏ó)"):
    try:
        log_pred = model.predict(input_data)[0]
        base_price_usd = np.expm1(log_pred)
        final_price_usd, house_age = adjust_price(
            base_price_usd,
            garage_cars=GarageCars,
            full_bath=FullBath,
            bedroom=BedroomAbvGr,
            kitchen=KitchenAbvGr,
            GrLivArea_m2=GrLivArea_m2,
            TotalBsmtSF_m2=TotalBsmtSF_m2,
            LotArea_m2=LotArea_m2,
            FirstFlr_m2=FirstFlr_m2,
            year_built=YearBuilt
        )

        final_price_thb = final_price_usd * USD_TO_THB

        st.subheader("üí∞ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô")
        st.write(f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: **‡∏ø{final_price_thb:,.2f} ‡∏ö‡∏≤‡∏ó**")
        st.info(
            f"üèóÔ∏è ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ö‡πâ‡∏≤‡∏ô: {house_age} ‡∏õ‡∏µ | üöó ‡πÇ‡∏£‡∏á‡∏£‡∏ñ: {GarageCars} ‡∏ä‡πà‡∏≠‡∏á | üõÅ ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥: {FullBath} ‡∏´‡πâ‡∏≠‡∏á | üõèÔ∏è ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô: {BedroomAbvGr} ‡∏´‡πâ‡∏≠‡∏á | üç≥ ‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß: {KitchenAbvGr} ‡∏´‡πâ‡∏≠‡∏á | üìê ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏¢: {GrLivArea_m2} m¬≤"
        )
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {e}")

st.markdown("---")
st.caption("ü§ñ ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ ‡πÄ‡∏™‡∏é‡∏ê‡∏ß‡∏∏‡∏í‡∏¥ | ‡∏ß‡∏¥‡∏ä‡∏≤ AI | ‡∏°‡∏Ç.")
